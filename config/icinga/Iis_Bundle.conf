object CheckCommand "Invoke-IcingaCheckIISAppPoolHealth" {
    import "PowerShell Base"

    arguments += {
        "-ExcludeAppPools" = {
            description = "An array of application pool names to exclude from the check."
            value = {{
                var arr = macro("$IcingaCheckIISAppPoolHealth_Array_ExcludeAppPools$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 11
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckIISAppPoolHealth_Int32_Verbosity$"
            order = 13
        }
        "-MemoryWarning" = {
            description = "The memory usage that triggers a warning state. Supports the % to compare the current memory usage against a configured limit of the AppPool."
            value = "$IcingaCheckIISAppPoolHealth_Object_MemoryWarning$"
            order = 4
        }
        "-IncludeAppPools" = {
            description = "An array of application pool names to include in the check."
            value = {{
                var arr = macro("$IcingaCheckIISAppPoolHealth_Array_IncludeAppPools$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 10
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckIISAppPoolHealth_Switchparameter_NoPerfData$"
            order = 99
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckIISAppPoolHealth_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckIISAppPoolHealth_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-PageFileCritical" = {
            description = "The page file usage that triggers a critical state for the AppPools"
            value = "$IcingaCheckIISAppPoolHealth_Object_PageFileCritical$"
            order = 9
        }
        "-CPUWarning" = {
            description = "The CPU usage percentage that triggers a warning state."
            value = "$IcingaCheckIISAppPoolHealth_Object_CPUWarning$"
            order = 2
        }
        "-OverrideNoWorker" = {
            set_if = {{
                var str = macro("$IcingaCheckIISAppPoolHealth_String_OverrideNoWorker$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "The state to set if no worker process is found for an application pool. Valid values are 'Ok', 'Warning', 'Critical', 'Unknown'. Default is 'Critical'."
            value = {{
                var str = macro("$IcingaCheckIISAppPoolHealth_String_OverrideNoWorker$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 12
        }
        "-ThreadCountWarning" = {
            description = "The thread count that triggers a warning state for the AppPools"
            value = "$IcingaCheckIISAppPoolHealth_Object_ThreadCountWarning$"
            order = 6
        }
        "-CPUCritical" = {
            description = "The CPU usage percentage that triggers a critical state."
            value = "$IcingaCheckIISAppPoolHealth_Object_CPUCritical$"
            order = 3
        }
        "-MemoryCritical" = {
            description = "The memory usage that triggers a critical state. Supports the % to compare the current memory usage against a configured limit of the AppPool."
            value = "$IcingaCheckIISAppPoolHealth_Object_MemoryCritical$"
            order = 5
        }
        "-PageFileWarning" = {
            description = "The page file usage that triggers a warning state for the AppPools"
            value = "$IcingaCheckIISAppPoolHealth_Object_PageFileWarning$"
            order = 8
        }
        "-ThreadCountCritical" = {
            description = "The thread count that triggers a critical state for the AppPools"
            value = "$IcingaCheckIISAppPoolHealth_Object_ThreadCountCritical$"
            order = 7
        }
    }
    vars.IcingaCheckIISAppPoolHealth_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "ThreadCountWarning" = {
            value = "$IcingaCheckIISAppPoolHealth_Object_ThreadCountWarning$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckIISAppPoolHealth_Switchparameter_NoPerfData$"
        }
        "CPUCritical" = {
            value = "$IcingaCheckIISAppPoolHealth_Object_CPUCritical$"
        }
        "OverrideNoWorker" = {
            value = "$IcingaCheckIISAppPoolHealth_String_OverrideNoWorker$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckIISAppPoolHealth_String_ThresholdInterval$"
        }
        "ExcludeAppPools" = {
            value = "$IcingaCheckIISAppPoolHealth_Array_ExcludeAppPools$"
        }
        "PageFileWarning" = {
            value = "$IcingaCheckIISAppPoolHealth_Object_PageFileWarning$"
        }
        "ThreadCountCritical" = {
            value = "$IcingaCheckIISAppPoolHealth_Object_ThreadCountCritical$"
        }
        "PageFileCritical" = {
            value = "$IcingaCheckIISAppPoolHealth_Object_PageFileCritical$"
        }
        "CPUWarning" = {
            value = "$IcingaCheckIISAppPoolHealth_Object_CPUWarning$"
        }
        "IncludeAppPools" = {
            value = "$IcingaCheckIISAppPoolHealth_Array_IncludeAppPools$"
        }
        "MemoryWarning" = {
            value = "$IcingaCheckIISAppPoolHealth_Object_MemoryWarning$"
        }
        "Verbosity" = {
            value = "$IcingaCheckIISAppPoolHealth_Int32_Verbosity$"
        }
        "MemoryCritical" = {
            value = "$IcingaCheckIISAppPoolHealth_Object_MemoryCritical$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckiisapppoolhealth"
}

object CheckCommand "Invoke-IcingaCheckIISHealth" {
    import "PowerShell Base"

    arguments += {
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckIISHealth_Int32_Verbosity$"
            order = 2
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckIISHealth_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckIISHealth_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckIISHealth_Switchparameter_NoPerfData$"
            order = 99
        }
    }
    vars.IcingaCheckIISHealth_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "ThresholdInterval" = {
            value = "$IcingaCheckIISHealth_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckIISHealth_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckIISHealth_Int32_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckiishealth"
}


